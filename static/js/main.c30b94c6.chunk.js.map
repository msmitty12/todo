{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["headerColor","panelColor","panelColor2","HeadFootWrapper","props","style","backgroundColor","height","react_default","a","createElement","children","Header","Filter","display","alignItems","fontSize","type","id","filterId","name","marginRight","filterName","StringFilter","width","src","alt","margin","size","LeftFilters","flexDirection","flexShrink","padding","Folders","flexGrow","LeftColumn","minWidth","TodosInner","this","todos","map","todo","index","key","description","Component","Todos","connect","state","PageInner","input","_this","flex","onSubmit","e","preventDefault","value","trim","dispatch","ref","node","Page","Body","App","className","App_Body","Boolean","window","location","hostname","match","store","createStore","arguments","length","undefined","action","concat","Object","toConsumableArray","completed","subscribe","console","log","getState","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c30b94c6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nconst headerColor = \"#47476b\"\nconst panelColor = \"#6c7c96\"\nconst panelColor2 = \"#9ab9ea\"\nconst pageColor = \"#e0e0eb\"\n\n\nfunction HeadFootWrapper(props) {\n  const style = {\n    backgroundColor: headerColor,\n    height: \"50px\"\n  }\n\n  return (\n    <div style={style}>\n      {props.children}\n    </div>\n  )\n}\n\nfunction Header() {\n  return (\n    <HeadFootWrapper>\n      <p>Checklist</p>\n    </HeadFootWrapper>\n  )\n}\n\n/*\nfunction Footer() {\n  return (\n    <HeadFootWrapper>\n      <p>Footer!</p>\n    </HeadFootWrapper>\n  )\n}\n*/\n\nfunction Filter(props) {\n  const style = {\n    display: \"flex\",\n    alignItems: \"center\",\n    height: \"30px\",\n    fontSize: \"20px\"\n  }\n\n  return (\n    <div style={style}>\n      <input type=\"checkbox\" id={props.filterId} name={props.filterId} style={{marginRight: \"10px\"}}></input>\n      <p style={{marginRight: \"20px\"}}>{props.filterName}</p>\n    </div>\n  )\n}\n\nfunction StringFilter(props) {\n  const inputStyle = {\n    margin: \"0 0 0 15px\",\n    width: \"120px\"\n  }\n  const parentStyle = {\n    display: \"flex\", \n    alignItems: \"center\",\n    height: \"30px\"\n  }\n  const imgStyle = {\n    width: \"20px\"\n  }\n\n  return (\n    <div style={parentStyle}>\n      <img style={imgStyle} src=\"https://img.icons8.com/metro/26/000000/search.png\" alt=\"Search\"></img>\n      <input style={inputStyle} type=\"text\" size=\"10\"/>\n    </div>\n  )\n}\n\nfunction LeftFilters() {\n  const style = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexShrink: 0,\n    padding: \"15px\"\n  }\n\n  return (\n    <div style={style}>\n      <Filter filterId=\"today\" filterName=\"Today\" />\n      <Filter filterId=\"nextTwoWeeks\" filterName=\"Next Two Weeks\" />\n      <StringFilter />\n    </div>\n  )\n}\n\nfunction Folders() {\n  const style = {\n    backgroundColor: panelColor2,\n    flexGrow: 1,\n    width: \"100%\"\n  }\n  return <div style={style} />\n}\n\nfunction LeftColumn() {\n  const style = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    minWidth: \"150px\",\n    height: \"100%\",\n    backgroundColor: panelColor\n  }\n\n  return (\n    <div style={style}>\n      <LeftFilters />\n      <Folders />\n    </div>\n  )\n}\n\nclass TodosInner extends Component {\n  render() {\n\n    return (\n        // TODO: Why is index bad? https://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js\n        <ul>\n          {this.props.todos.map((todo, index) => (\n              <li key={index}>{todo.description}</li>\n            ))}\n        </ul>\n      )\n  }\n}\n\nconst mapStateToPropsTodos = (state) => {\n  return {\n    todos: state\n  }\n}\n\nconst Todos = connect(mapStateToPropsTodos, null)(TodosInner)\n\nconst addTodo = description => ({\n  type: 'ADD_TODO',\n  description\n})\n\nclass PageInner extends Component {\n  render() {\n    const style = {\n      flex: 1\n    }\n\n    let input\n    return (\n      <div style={style}>\n        <form\n          onSubmit={e => {\n            e.preventDefault()\n            if (!input.value.trim()) {\n              return\n            }\n            this.props.dispatch(addTodo(input.value))\n            input.value = ''\n          }}\n        >\n          <input ref={node => (input = node)} />\n          <button type=\"submit\">Add Todo</button>\n        </form>\n        <Todos />\n      </div>\n    )\n  }\n}\n\nconst Page = connect()(PageInner)\n\nclass Body extends Component {\n  render() {\n    const style = {\n      flex: 1,\n      display: \"flex\",\n      backgroundColor: pageColor\n    }\n\n    return (\n      <div style={style}>\n        <LeftColumn />\n        <Page />\n      </div>\n    )\n  }\n}\n\n\nclass App extends Component {\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <Body />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction reducer(state = [], action) {\n  switch (action.type) { \n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          name: action.name,\n          description: action.description,\n          completed: false\n        }\n      ]\n    default:\n      return state\n  }\n}\n\nlet store = createStore(reducer)\nstore.subscribe(() => (console.log(store.getState())))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}